plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'org.ajoberstar.grgit' version '3.0.0'
}


import org.ajoberstar.grgit.Commit
import org.ajoberstar.grgit.Grgit
import org.apache.tools.ant.filters.ReplaceTokens

String majorVersion = 3
String minorVersion = 12
Grgit repo = Grgit.open(currentDir: project.projectDir)

Commit commit = repo.head()
String commitHash = commit.abbreviatedId

String branch = System.getenv("BRANCH_NAME") == null ? repo.branch.current().name      : System.getenv("BRANCH_NAME")

boolean releasing = commit.shortMessage.contains("[release]")

String buildNumber = findProperty("BUILD_NUMBER") == null ? (releasing ? '0' : commitHash.substring(0,6)) : findProperty("BUILD_NUMBER")
String jdDirectory = System.getenv("JAVADOCS_DIR") == null ? null                      : System.getenv("JAVADOCS_DIR")

archivesBaseName = rootProject.name

version = "$majorVersion.$minorVersion.$buildNumber"
String mavenVersion = releasing ? version : "$majorVersion.$minorVersion-SNAPSHOT"

println("version: $version")
println("isReleasing: $releasing")
println("mavenVersion: $mavenVersion")

sourceCompatibility = 17
targetCompatibility = 17

configurations.configureEach {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}
allprojects {
    group = "top.mrxiaom"
    version = rootProject.version

    repositories {
        jcenter()
        mavenCentral()
        maven { name "papermc"; url "https://papermc.io/repo/repository/maven-public/" }
        maven { name 'enginehub'; url 'https://maven.enginehub.org/repo/' }
        maven { name 'RoseWoodDev'; url "https://repo.rosewooddev.io/repository/public/" }
        maven { name 'PlaceholderAPI'; url "https://repo.extendedclip.com/content/repositories/placeholderapi/" }
        maven { name 'Spigot'; url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
        maven { name 'Mythic'; url 'https://mvn.lumine.io/repository/maven/' }
        maven { name 'vault-repo'; url 'https://jitpack.io' }
    }
    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        sourceCompatibility = 17
        targetCompatibility = 17
    }
}

dependencies {
    compileOnly "io.papermc.paper:paper-api:1.19.4-R0.1-SNAPSHOT"

    compileOnly 'io.netty:netty-all:4.1.25.Final' // netty is shadowed inside spigot jar

    compileOnly 'org.ow2.asm:asm:9.3'
    compileOnly 'net.bytebuddy:byte-buddy:1.12.16'
    compileOnly 'com.udojava:EvalEx:2.7'
    compileOnly 'commons-lang:commons-lang:2.6'
    compileOnly 'org.jetbrains:annotations:24.0.1'
    compileOnly 'com.github.LoneDev6:api-itemsadder:3.6.1'
    compileOnly 'io.lumine:Mythic-Dist:5.4.1-SNAPSHOT'
    compileOnly 'me.clip:placeholderapi:2.11.5'

    implementation("org.projectlombok:lombok:1.18.30")
    annotationProcessor("org.projectlombok:lombok:1.18.30")

    implementation('com.sk89q.worldguard:worldguard-core:7.0.4-SNAPSHOT')
    implementation('com.sk89q.worldguard:worldguard-bukkit:7.0.4-SNAPSHOT') {
        exclude group: 'io.papermc', module: 'paperlib'
        exclude group: 'org.bstats', module: 'bstats-bukkit'
        exclude group: 'org.bukkit', module: 'bukkit'
        exclude group: 'org.spigotmc', module: 'spigot-api'
    }
    compileOnly('com.github.MilkBowl:VaultAPI:1.7') { transitive = false }

    for (Project proj : project(":nms").subprojects) {
        implementation(proj)
        shadow(proj)
    }
}

tasks.withType(ProcessResources).configureEach {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from(sourceSets.main.resources.srcDirs) {
        expand('version': project.version)
        include 'plugin.yml'
    }
    from(sourceSets.main.resources.srcDirs) {
        filter(ReplaceTokens, tokens: ['GIT_BRANCH': branch, 'GIT_HASH': commitHash], beginToken: '{', endToken: '}')
        include 'lang/'
    }
}

jar {
    archiveClassifier.set('core')
}

shadowJar {
    configurations = [project.configurations.shadow]
}
tasks.build.dependsOn(shadowJar)
task apiJar(type: Jar) {
    includeEmptyDirs = false
    from sourceSets.main.output.classesDirs
    include('**/think/rpgitems/RPGItems.class')
    include('**/think/rpgitems/Events.class')
    include('**/think/rpgitems/api/')
    include('**/think/rpgitems/item/')
    include('**/think/rpgitems/power/')
    include('**/think/rpgitems/event/')
    include('**/think/rpgitems/utils/')
    exclude('**/think/rpgitems/power/impl/')
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

task checkRelease() {
    doLast {
        if (!releasing) {
            throw new GradleException("This is a canary version, use with caution!")
        }
    }
}

// write javadocs to an external folder which can be served via nginx
if (jdDirectory != null) {
    javadoc.destinationDir = file("${jdDirectory}/rpgitems-${mavenVersion}")
}

javadoc {
    (options as StandardJavadocDocletOptions).with {
        links 'https://docs.oracle.com/javase/17/docs/api/'
        links 'https://hub.spigotmc.org/javadocs/spigot/'
        links 'https://ci.md-5.net/job/BungeeCord/ws/chat/target/apidocs/'
        links 'https://netty.io/4.1/api/'

        locale 'en_US'
        encoding 'UTF-8'
        docEncoding 'UTF-8'
        addBooleanOption('keywords', true)
        addBooleanOption('Xdoclint:none', true)

        def currentJavaVersion = JavaVersion.current()
        if (currentJavaVersion > JavaVersion.VERSION_1_9) {
            options.addBooleanOption('html5', true)
        }

        windowTitle = "RPGItems Javadoc"
        docTitle = "<b>RPGItems</b> " + version
    }
}


publishing {
    publications {
        mavenRelease(MavenPublication) {
            from components.java
            groupId "top.mrxiaom"
            artifactId "rpgitems"
            version "$mavenVersion"

            artifact apiJar
            artifact shadowJar
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'RPGItems-reloaded'
                description = 'The legacy RPGItems continues. (fork)'
                url = 'https://github.com/MrXiaoM/RPGItems-reloaded'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://mit-license.org/'
                    }
                }
                developers {
                    developer {
                        name = 'MrXiaoM'
                        email = 'mrxiaom@qq.com'
                    }
                }
                scm {
                    url = 'https://github.com/MrXiaoM/RPGItems-reloaded'
                    connection = 'scm:git:https://github.com/MrXiaoM/RPGItems-reloaded.git'
                    developerConnection = 'scm:git:https://github.com/MrXiaoM/RPGItems-reloaded.git'
                }
            }
        }
    }
}
signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    if (signingKey != null && signingPassword != null) {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.mavenRelease
    }
}
nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = findProperty("MAVEN_USERNAME")
            password = findProperty("MAVEN_PASSWORD")
        }
    }
}
